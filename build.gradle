buildscript {
    ext {
        kotlinVersion = '1.3.70'
        springBootVersion = '2.1.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
//        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
//    id 'org.liquibase.gradle' version '1.2.4'
    id 'org.sonarqube' version '2.6.1'
}

sonarqube {
    properties {
        property 'springbootgraphql', 'Example of SonarQube Scanner'
    }
}


apply plugin: 'java'
//apply plugin: 'kotlin'
//apply plugin: 'kotlin-spring'
//apply plugin: 'eclipse'
//apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

//jacoco {
//  toolVersion = "0.8.6"
//}


group = 'com.ochiengolanga.tuts'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
//    mavenLocal()
//com.icosillion.podengine:podengine:2.3
    maven { url 'https://maven.icosillion.com/artifactory/open-source/' }
//springCloudVersion = 'Greenwich.M1'
    maven { url "https://repo.spring.io/milestone" }
//    maven { url "https://repo1.maven.org/maven2/org/junit/" }
//    maven { url "http://repo.spring.io/libs-milestone" }
//    maven { url "http://jcenter.bintray.com" }
//    jcenter()
}

ext {
    springCloudVersion = 'Greenwich.M1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


configurations.all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

//test {
    // Enable JUnit 5 (Gradle 4.6+).
//    useJUnitPlatform()

    // Always run tests, even when nothing changed.
//    dependsOn 'cleanTest'

    // Show test results.
//    testLogging {
//        events "passed", "skipped", "failed"
//    }
//}


dependencies {
    implementation('com.icosillion.podengine:podengine:2.3')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation group: 'com.graphql-java', name: 'graphql-spring-boot-starter', version: '5.0.2'
    implementation group: 'com.graphql-java', name: 'graphiql-spring-boot-starter', version: '5.0.2'
    implementation group: 'com.graphql-java', name: 'graphql-java-tools', version: '5.2.4'
    runtimeOnly('com.h2database:h2')
    compileOnly('org.projectlombok:lombok')
    implementation "org.springframework.boot:spring-boot-starter-log4j2"


//    implementation('com.graphql-java-kickstart:graphql-spring-boot-starter:8.0.0')
    // to embed GraphiQL tool
//    implementation('com.graphql-java-kickstart:graphiql-spring-boot-starter:8.0.0')
//    implementation('com.graphql-java-kickstart:graphql-java-tools:6.2.0')
    // to embed Altair tool
//    runtimeOnly('com.graphql-java-kickstart:altair-spring-boot-starter:8.0.0')
    // to embed Voyager tool
//    runtimeOnly('com.graphql-java-kickstart:voyager-spring-boot-starter:8.0.0'

    // testing facilities
//    implementation group: 'com.graphql-java-kickstart', name: 'graphql-spring-boot-starter-test', version: '8.0.0'
//    testImplementation('com.graphql-java-kickstart:graphql-spring-boot-starter-test:8.0.0')
//    testImplementation('com.graphql-java-kickstart:graphql-spring-boot-test-autoconfigure:8.0.0')

//    implementation('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
//    implementation('org.springframework.cloud:spring-cloud-starter-openfeign')


//    implementation group: 'org.apache.maven.plugins', name: 'maven-surefire-plugin', version: '2.22.2'
//    testImplementation 'org.apache.maven.surefire:surefire-junit-platform:2.22.2'

//    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

//    implementation "org.springframework.boot:spring-boot-starter-web"

//    testImplementation('org.springframework.boot:spring-boot-starter-test')
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.3'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.0.3'

//    implementation 'org.apache.httpcomponents:httpclient:4.5.3'
//    testImplementation "com.h2database:h2:1.4.194"
//    testImplementation "junit:junit:4.8.2"
//    testImplementation "org.mockito:mockito-core:1.9.5"
//    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}"
//    implementation("org.liquibase:liquibase-core")
//    testImplementation "io.rest-assured:rest-assured:3.0.6"
//    testImplementation "io.rest-assured:spring-mock-mvc:3.0.6"

//    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
//    implementation "javax.persistence:javax.persistence-api:2.2"
//    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
//    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
//    implementation 'commons-io:commons-io:2.6'

}



//sourceSets {
//    main.java.srcDirs += "src/main/java"
//    test.java.srcDirs += "src/test/java"
//}


//task jacocoTestReport1(type: JacocoReport, dependsOn: ['test', 'jacocoTestReport']) {

//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }

////    def mainSrc = "$project.projectDir/src/main/kotlin"
//    def mainSrc = "src/main/java"

//    sourceDirectories = files([mainSrc])
//}
